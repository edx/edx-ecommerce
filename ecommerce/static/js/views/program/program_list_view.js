define([
        'jquery',
        'backbone',
        'underscore',
        'underscore.string',
        'moment',
        'text!templates/program/program_list.html',
        'dataTablesBootstrap'
    ],
    function ($,
              Backbone,
              _,
              _s,
              moment,
              programListViewTemplate) {

        'use strict';

        return Backbone.View.extend({
            className: 'program-list-view',

            template: _.template(programListViewTemplate),

            initialize: function () {
                this.listenTo(this.collection, 'update', this.refreshTableData);
            },

            getRowData: function (program) {
                return {
                    name: program.get('name'),
                    uuid: program.get('uuid'),
                    benefit_type: program.get('offer').get('benefit').get('type'),
                    benefit_value: program.get('offer').get('benefit').get('value'),
                    last_edited: moment(program.get('last_edited')).format('MMMM DD, YYYY, h:mm A')
                };
            },

            renderProgramTable: function () {
                var filterPlaceholder = gettext('Search...'),
                    $emptyLabel = '<label class="sr">' + filterPlaceholder + '</label>';

                if (!$.fn.dataTable.isDataTable('#programTable')) {
                    this.$el.find('#programTable').DataTable({
                        autoWidth: false,
                        info: true,
                        paging: true,
                        oLanguage: {
                            oPaginate: {
                                sNext: gettext('Next'),
                                sPrevious: gettext('Previous')
                            },

                            // Translators: _START_, _END_, and _TOTAL_ are placeholders. Do NOT translate them.
                            sInfo: gettext('Displaying _START_ to _END_ of _TOTAL_ programs'),

                            // Translators: _MAX_ is a placeholder. Do NOT translate it.
                            sInfoFiltered: gettext('(filtered from _MAX_ total programs)'),

                            // Translators: _MENU_ is a placeholder. Do NOT translate it.
                            sLengthMenu: gettext('Display _MENU_ programs'),
                            sSearch: ''
                        },
                        order: [[0, 'asc']],
                        columns: [
                            {
                                title: gettext('Program'),
                                data: 'name',
                                fnCreatedCell: function (nTd, sData, oData) {
                                    $(nTd).html(_s.sprintf('<a href="/programs/%s/" class="program-name">%s</a>' +
                                        '<div class="program-uuid">%s</div>', oData.uuid, oData.name, oData.uuid));
                                }
                            },
                            {
                                title: gettext('Discount Value'),
                                data: 'benefit_value',
                                fnCreatedCell: function (nTd, sData, oData) {
                                    $(nTd).html(oData.benefit_value);
                                }
                            },
                            {
                                title: gettext('Discount Type'),
                                data: 'benefit_type',
                                fnCreatedCell: function (nTd, sData, oData) {
                                    $(nTd).html(oData.benefit_type);
                                }
                            },
                            {
                                title: gettext('Last Edited'),
                                data: 'last_edited'
                            },
                            {
                                data: 'uuid',
                                visible: false,
                                searchable: true
                            }
                        ]
                    });

                    // NOTE: #programTable_filter is generated by dataTables
                    this.$el.find('#programTable_filter label').prepend($emptyLabel);

                    this.$el.find('#programTable_filter input')
                        .attr('placeholder', filterPlaceholder)
                        .addClass('field-input input-text')
                        .removeClass('form-control input-sm');

                }
            },

            render: function () {
                this.$el.html(this.template);
                this.renderProgramTable();
                this.refreshTableData();

                return this;
            },

            /**
             * Refresh the data table with the collection's current information.
             */
            refreshTableData: function () {
                var data = this.collection.map(this.getRowData, this),
                    $table = this.$el.find('#programTable').DataTable();

                $table.clear().rows.add(data).draw();
                return this;
            }
        });
    }
);
