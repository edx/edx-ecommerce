"""
Python integration module for Coupons app
"""
import logging
from decimal import Decimal

from django.db.utils import IntegrityError
from oscar.core.loading import get_model

from ecommerce.extensions.catalogue.utils import generate_coupon_slug, generate_sku, get_or_create_catalog
from ecommerce.extensions.voucher.models import CouponVouchers
from ecommerce.extensions.voucher import utils

Product = get_model('catalogue', 'Product')
ProductCategory = get_model('catalogue', 'ProductCategory')
ProductClass = get_model('catalogue', 'ProductClass')
StockRecord = get_model('partner', 'StockRecord')

logger = logging.getLogger(__name__)


def create_or_update_coupon_product(title, price, stock_record_ids, partner, categories, note,
                                    course_key=None, catalog_name=None,
                                    create_vouchers=False, quantity=None, voucher_type=None, code=None,
                                    benefit_type=None, benefit_value=None, start_date=None, end_date=None):
    """
    Creates a coupon product and a corresponding stock record.  Supports immediate voucher creation through
    the create_vouchers flag and associated voucher data.

    Arguments:
        title (str): The name of the coupon.
        price (int): The price of the coupon(s).
        stock_record_ids: The associated stock records for this coupon product
        partner: The associated User object
        categories: The list of associated Category objects
        note: A text field containing pertinent information about the coupon
        create_vouchers: Boolean flag to enable immediate voucher creation
        benefit_type: Voucher data (str)
        benefit_value: Voucher data (int)
        start_date Voucher data (Datetime)
        end_date: Voucher data (Datetime)
        code: Voucher data, autogenerated by system if not specified (str)
        quantity: Amount of vouchers to create (int)
        voucher_type: Voucher data, see related enum -- single-use, multi-use, etc. (str)
        course_key: (optional) The course associated with this coupon product
        catalog_name: (optional) The name of the catalog associated with this coupon product

    Returns:
        A coupon product object.

    Raises:
        IntegrityError: An error occured when create_vouchers method returns
                        an IntegrityError exception
    """
    # Use the provided information to locate (or create) the catalog
    stock_records_string = ' '
    if stock_record_ids:
        stock_records_string.join(unicode(id) for id in stock_record_ids)
    if catalog_name is None:
        catalog_name = 'Catalog for stock records: {}'.format(stock_records_string)
    catalog, __ = get_or_create_catalog(
        name=catalog_name,
        partner=partner,
        stock_record_ids=stock_record_ids
    )
    coupon_slug = generate_coupon_slug(title=title, catalog=catalog, partner=partner)
    product_class = ProductClass.objects.get(slug='coupon')
    coupon_product, __ = Product.objects.get_or_create(
        title=title,
        product_class=product_class,
        slug=coupon_slug
    )

    coupon_product.attr.note = note
    coupon_product.attr.course_key = course_key

    for category in categories:
        ProductCategory.objects.get_or_create(product=coupon_product, category=category)

    # Sometimes vouchers are created during the order stage versus the fulfillment stage,
    # because we want these vouchers to be included with the line in the order record.
    if create_vouchers:
        try:
            utils.create_vouchers(
                name=title,
                benefit_type=benefit_type,
                benefit_value=Decimal(benefit_value),
                catalog=catalog,
                coupon=coupon_product,
                end_datetime=end_date,
                code=code,
                quantity=int(quantity),
                start_datetime=start_date,
                voucher_type=voucher_type
            )
        except IntegrityError as ex:
            logger.exception('Failed to create vouchers for [%s] coupon.', coupon_product.title)
            raise IntegrityError(ex)  # pylint: disable=nonstandard-exception

        coupon_vouchers = CouponVouchers.objects.get(coupon=coupon_product)
        coupon_product.attr.coupon_vouchers = coupon_vouchers

    coupon_product.save()

    sku = generate_sku(
        product=coupon_product,
        partner=partner,
        catalog=catalog,
    )

    stock_record, __ = StockRecord.objects.get_or_create(
        product=coupon_product,
        partner=partner,
        partner_sku=sku
    )
    stock_record.price_currency = 'USD'
    stock_record.price_excl_tax = price
    stock_record.save()
    return coupon_product
